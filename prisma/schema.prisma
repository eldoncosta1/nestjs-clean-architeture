generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  authorId     String    @map("author_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  bestAnswerId String?   @unique @map("best_answer_id")

  author     User    @relation(fields: [authorId], references: [id])
  bestAnswer Answer? @relation("bestAnswer", fields: [bestAnswerId], references: [id])

  answers     Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  authorId   String    @map("author_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  questionId String    @map("question_id")

  author       User         @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  question     Question     @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String  @id @default(uuid())
  content    String
  authorId   String  @map("author_id")
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  title       String
  content     String
  recipientId String    @map("recipient_id")
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

model OutboxEvent {
  id            String    @id @default(uuid())
  eventId       String    @unique @map("event_id")
  eventType     String    @map("event_type")
  aggregateId   String    @map("aggregate_id")
  aggregateType String    @map("aggregate_type")
  eventVersion  Int       @default(1) @map("event_version")
  occurredAt    DateTime  @map("occurred_at")
  payload       Json
  processedAt   DateTime? @map("processed_at")
  published     Boolean   @default(false)
  attempts      Int       @default(0)
  lastAttemptAt DateTime? @map("last_attempt_at")
  errorMessage  String?   @map("error_message")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@index([published])
  @@index([occurredAt])
  @@index([aggregateId])
  @@index([eventType])
  @@index([attempts, published])
  @@map("outbox_events")
}
